// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //zero the x input?
    Mux16 (a=x, b=false, sel=zx, out=zxx);

    //zero the y input?
    Mux16 (a=y, b=false, sel=zy, out=zyy);

    //negate the x
    Not16 (in=zxx, out=negzxx);
    Mux16 (a=zxx, b=negzxx, sel=nx, out=nxx);

    //negate the y
    Not16 (in=zyy, out=negzyy);
    Mux16 (a=zyy, b=negzyy, sel=ny, out=nyy);

    //x&y
    And16 (a=nxx, b=nyy, out=f0);

    //x+y
    Add16 (a=nxx, b=nyy, out=f1);
    
    //f
    Mux16 (a=f0, b=f1, sel=f, out=mOut);

    //negate output
    Not16 (in=mOut, out=negmOut);
    Mux16 (a=mOut, b=negmOut, sel=no, out=out, out[0..7]=lsoutTemp, out[8..15]=msoutTemp);

    //out<0 check
    And16 (a[0..7]=lsoutTemp, a[8..15]=msoutTemp, b[0..14]=false, b[15]=true, out=ngtemp);
    Or16Way (in=ngtemp, out=ng);

    //out==0 check
    Or8Way (in=lsoutTemp, out=ls);
    Or8Way (in=msoutTemp, out=ms);
    Or (a=ls, b=ms, out=nzr);
    Not (in=nzr, out=zr);        
}