// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
   //identify instruction type
   Mux16 (a=instruction, b=outALU, sel=instruction[15], out=inARegister);
  
   //A Register   
   ARegister (in=inARegister, load=loadA, out=outARegister);
   Not (in=instruction[15], out=notinst15);
   Or (a=notinst15, b=instruction[5], out=loadA);

   //D Register
   DRegister (in=outALU, load=loadD, out=outDRegister);
   And (a=instruction[4], b=instruction[15], out=loadD);

   //M Register (Selected Register in RAM)
   And (a=instruction[3], b=instruction[15], out=writeM);
   And16 (a=outALU, b=true, out=outM);
   And16 (a=outARegister, b[0..15]=true, out[0..14]=addressM);

   //ALU
   ALU (x=outDRegister, y=selecty, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, zr=zr , ng=ng );

   //Compute selecty by deciding which register to operate on
   Mux16 (a=outARegister, b=inM, sel=instruction[12], out=selecty);

   //update pc
   PC(in=outARegister, load=loadpc , reset=reset, inc=notloadpc, out[0..14]=pc);

   //Compute pc load
   Mux (a=false, b=notzrAndnotng, sel=instruction[0], out=m1);
   Mux (a=zr, b=notng, sel=instruction[0], out=m2);
   Mux (a=ng, b=notzr, sel=instruction[0], out=m3);
   Mux (a=zrOrng, b=true, sel=instruction[0], out=m4);

   Mux (a=m1, b=m2, sel=instruction[1], out=m11);
   Mux (a=m3, b=m4, sel=instruction[1], out=m12);

   Mux (a=m11, b=m12, sel=instruction[2], out=m22);
   And (a=m22, b=instruction[15], out=loadpc);
   Not (in=loadpc, out=notloadpc);

   //Helper
   Not (in=zr, out=notzr);
   Not (in=ng, out=notng);
   Not (in=notzrAndnotng, out=zrOrng);
   And (a=notzr, b=notng, out=notzrAndnotng);
   
}
